{
  "version": 3,
  "sources": [
    "../../counter/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;AASQ;AAAa;AAAb;AALR;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;AAWK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAEG;AAAa;AAAb;;AAIA;AAAA;AAAA;AAAA;AAAc;AAAd;AAAA;AAAA;AAAA;AACO;AAAA;AAAA;AAAA;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.counter.contract.Counter.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"count\""
    },
    "13": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "15": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "18": {
      "op": "bytec_0 // \"count\"",
      "defined_out": [
        "\"count\""
      ],
      "stack_out": [
        "\"count\""
      ]
    },
    "19": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"count\"",
        "0"
      ],
      "stack_out": [
        "\"count\"",
        "0"
      ]
    },
    "20": {
      "op": "app_global_put",
      "stack_out": []
    },
    "21": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "23": {
      "op": "bz main_after_if_else@7",
      "stack_out": []
    },
    "26": {
      "op": "pushbytess 0x4c5c61ba 0x36e72924 // method \"create()void\", method \"incr_counter()uint64\"",
      "defined_out": [
        "Method(create()void)",
        "Method(incr_counter()uint64)"
      ],
      "stack_out": [
        "Method(create()void)",
        "Method(incr_counter()uint64)"
      ]
    },
    "38": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(create()void)",
        "Method(incr_counter()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create()void)",
        "Method(incr_counter()uint64)",
        "tmp%2#0"
      ]
    },
    "41": {
      "op": "match main_create_route@5 main_incr_counter_route@6",
      "stack_out": []
    },
    "47": {
      "block": "main_after_if_else@7",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "48": {
      "op": "return",
      "stack_out": []
    },
    "49": {
      "block": "main_incr_counter_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "51": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "52": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "53": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "55": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "56": {
      "callsub": "smart_contracts.counter.contract.Counter.incr_counter",
      "op": "callsub incr_counter",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "59": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "60": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "66": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "67": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "68": {
      "op": "log",
      "stack_out": []
    },
    "69": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "70": {
      "op": "return",
      "stack_out": []
    },
    "71": {
      "block": "main_create_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "73": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "74": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "75": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "77": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "78": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "79": {
      "callsub": "smart_contracts.counter.contract.Counter.create",
      "op": "callsub create"
    },
    "82": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "83": {
      "op": "return",
      "stack_out": []
    },
    "84": {
      "subroutine": "smart_contracts.counter.contract.Counter.create",
      "params": {},
      "block": "create",
      "stack_in": [],
      "op": "bytec_0 // \"count\"",
      "defined_out": [
        "\"count\""
      ],
      "stack_out": [
        "\"count\""
      ]
    },
    "85": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"count\"",
        "0"
      ],
      "stack_out": [
        "\"count\"",
        "0"
      ]
    },
    "86": {
      "op": "app_global_put",
      "stack_out": []
    },
    "87": {
      "retsub": true,
      "op": "retsub"
    },
    "88": {
      "subroutine": "smart_contracts.counter.contract.Counter.incr_counter",
      "params": {},
      "block": "incr_counter",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "89": {
      "op": "bytec_0 // \"count\"",
      "defined_out": [
        "\"count\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"count\""
      ]
    },
    "90": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "91": {
      "error": "check self.count exists",
      "op": "assert // check self.count exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "92": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "93": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "94": {
      "op": "bytec_0 // \"count\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"count\""
      ]
    },
    "95": {
      "op": "swap",
      "stack_out": [
        "\"count\"",
        "new_state_value%0#0"
      ]
    },
    "96": {
      "op": "app_global_put",
      "stack_out": []
    },
    "97": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "98": {
      "op": "bytec_0 // \"count\"",
      "stack_out": [
        "0",
        "\"count\""
      ]
    },
    "99": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "100": {
      "error": "check self.count exists",
      "op": "assert // check self.count exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "101": {
      "retsub": true,
      "op": "retsub"
    }
  }
}