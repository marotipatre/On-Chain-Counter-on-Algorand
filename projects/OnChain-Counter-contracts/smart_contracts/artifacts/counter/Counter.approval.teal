#pragma version 10
#pragma typetrack false

// smart_contracts.counter.contract.Counter.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1
    bytecblock "count"
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/counter/contract.py:10
    // self.count = UInt64(0)
    bytec_0 // "count"
    intc_0 // 0
    app_global_put

main_after_if_else@2:
    // smart_contracts/counter/contract.py:5
    // class Counter(ARC4Contract):
    txn NumAppArgs
    bz main_after_if_else@7
    pushbytess 0x4c5c61ba 0x36e72924 // method "create()void", method "incr_counter()uint64"
    txna ApplicationArgs 0
    match main_create_route@5 main_incr_counter_route@6

main_after_if_else@7:
    // smart_contracts/counter/contract.py:5
    // class Counter(ARC4Contract):
    intc_0 // 0
    return

main_incr_counter_route@6:
    // smart_contracts/counter/contract.py:16
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub incr_counter
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_create_route@5:
    // smart_contracts/counter/contract.py:12
    // @abimethod(create = "require")
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    callsub create
    intc_1 // 1
    return


// smart_contracts.counter.contract.Counter.create() -> void:
create:
    // smart_contracts/counter/contract.py:14
    // self.count = UInt64(0)
    bytec_0 // "count"
    intc_0 // 0
    app_global_put
    retsub


// smart_contracts.counter.contract.Counter.incr_counter() -> uint64:
incr_counter:
    // smart_contracts/counter/contract.py:18
    // self.count += UInt64(1)
    intc_0 // 0
    bytec_0 // "count"
    app_global_get_ex
    assert // check self.count exists
    intc_1 // 1
    +
    bytec_0 // "count"
    swap
    app_global_put
    // smart_contracts/counter/contract.py:19
    // return self.count
    intc_0 // 0
    bytec_0 // "count"
    app_global_get_ex
    assert // check self.count exists
    retsub
